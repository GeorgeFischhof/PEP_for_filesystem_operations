Path.stat()
Return information about this path (similarly to os.stat()). The result is looked up at each call to this method.

>>> p.stat().st_size
956


====

Path.chmod(mode)
Change the file mode and permissions, like os.chmod():
p.chmod(0o444)


====

Path.exists()
Whether the path points to an existing file or directory

Note If the path points to a symlink, exists() returns whether the symlink points to an existing file or directory.


====

Path.glob(pattern)
Glob the given pattern in the directory represented by this path, yielding all matching files (of any kind):

The “**” pattern means “this directory and all subdirectories, recursively”. In other words,
it enables recursive globbing:


====

Path.group()
Return the name of the group owning the file. KeyError is raised if the file’s gid isn’t found in the system database.


====

Path.is_dir()
Return True if the path points to a directory (or a symbolic link pointing to a directory),
False if it points to another kind of file.

False is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.


====

Path.is_file()
Return True if the path points to a regular file (or a symbolic link pointing to a regular file),
False if it points to another kind of file.

False is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.


====

Path.is_symlink()
Return True if the path points to a symbolic link, False otherwise.

False is also returned if the path doesn’t exist; other errors (such as permission errors) are propagated.


====

Path.is_socket()
Return True if the path points to a Unix socket (or a symbolic link pointing to a Unix socket),
False if it points to another kind of file.

False is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.


====

Path.is_fifo()
Return True if the path points to a FIFO (or a symbolic link pointing to a FIFO),
False if it points to another kind of file.

False is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.


====

Path.iterdir()
When the path points to a directory, yield path objects of the directory contents:

>>> p = Path('docs')
>>> for child in p.iterdir(): child


====

Path.lchmod(mode)
Like Path.chmod() but, if the path points to a symbolic link,
the symbolic link’s mode is changed rather than its target’s.


====

Path.lstat()
Like Path.stat() but, if the path points to a symbolic link,
return the symbolic link’s information rather than its target’s.


====

Path.mkdir(mode=0o777, parents=False, exist_ok=False)
Create a new directory at this given path. If mode is given, it is combined with the process’ umask value
to determine the file mode and access flags. If the path already exists, FileExistsError is raised.

If parents is true, any missing parents of this path are created as needed; they are created with the
default permissions without taking mode into account (mimicking the POSIX mkdir -p command).

If parents is false (the default), a missing parent raises FileNotFoundError.

If exist_ok is false (the default), FileExistsError is raised if the target directory already exists.

If exist_ok is true, FileExistsError exceptions will be ignored (same behavior as the POSIX mkdir -p command),
but only if the last path component is not an existing non-directory file.


====

Path.owner()
Return the name of the user owning the file. KeyError is raised if the file’s uid isn’t found in the system database.


====

Path.rename(target)
Rename this file or directory to the given target. On Unix, if target exists and is a file,
it will be replaced silently if the user has permission. target can be either a string or another path object:


====

Path.replace(target)
Rename this file or directory to the given target. If target points to an existing file or directory,
it will be unconditionally replaced.


====

Path.resolve(strict=False)
Make the path absolute, resolving any symlinks. A new path object is returned

“..” components are also eliminated (this is the only method to do so):

If the path doesn’t exist and strict is True, FileNotFoundError is raised. If strict is False,
the path is resolved as far as possible and any remainder is appended without checking whether it exists.
If an infinite loop is encountered along the resolution path, RuntimeError is raised.


====

Path.rglob(pattern)
This is like calling Path.glob() with “**” added in front of the given pattern:


====

Path.rmdir()
Remove this directory. The directory must be empty.


====

Path.samefile(other_path)
Return whether this path points to the same file as other_path, which can be either a Path object, or a string.
The semantics are similar to os.path.samefile() and os.path.samestat().

An OSError can be raised if either file cannot be accessed for some reason.


====

Path.symlink_to(target, target_is_directory=False)
Make this path a symbolic link to target. Under Windows, target_is_directory must be true (default False)
if the link’s target is a directory. Under POSIX, target_is_directory’s value is ignored.

Note The order of arguments (link, target) is the reverse of os.symlink()’s.


====

Path.touch(mode=0o666, exist_ok=True)
Create a file at this given path. If mode is given, it is combined with the process’ umask value
to determine the file mode and access flags. If the file already exists,
the function succeeds if exist_ok is true (and its modification time is updated to the current time),
otherwise FileExistsError is raised.


====

Path.unlink()
Remove this file or symbolic link. If the path points to a directory, use Path.rmdir() instead.