
shutil.copyfileobj(fsrc, fdst[, length])
Copy the contents of the file-like object fsrc to the file-like object fdst. The integer length, if given, is
the buffer size. In particular, a negative length value means to copy the data without looping over the source
data in chunks; by default the data is read in chunks to avoid uncontrolled memory consumption. Note that if
the current file position of the fsrc object is not 0, only the contents from the current file position to the
end of the file will be copied.


====

shutil.copyfile(src, dst, *, follow_symlinks=True)
Copy the contents (no metadata) of the file named src to a file named dst and return dst. src and dst are path
names given as strings. dst must be the complete target file name; look at shutil.copy() for a copy that
accepts a target directory path. If src and dst specify the same file, SameFileError is raised.


====

shutil.copymode(src, dst, *, follow_symlinks=True)
Copy the permission bits from src to dst. The file contents, owner, and group are unaffected. src and dst are
path names given as strings. If follow_symlinks is false, and both src and dst are symbolic links, copymode()
will attempt to modify the mode of dst itself (rather than the file it points to). This functionality is not
available on every platform; please see copystat() for more information. If copymode() cannot modify symbolic
links on the local platform, and it is asked to do so, it will do nothing and return.


====

shutil.copystat(src, dst, *, follow_symlinks=True)
Copy the permission bits, last access time, last modification time, and flags from src to dst. On Linux,
copystat() also copies the “extended attributes” where possible. The file contents, owner, and group are
unaffected. src and dst are path names given as strings.

If follow_symlinks is false, and src and dst both refer to symbolic links, copystat() will operate on the
symbolic links themselves rather than the files the symbolic links refer to—reading the information from the
src symbolic link, and writing the information to the dst symbolic link.


====

shutil.copy(src, dst, *, follow_symlinks=True)
Copies the file src to the file or directory dst. src and dst should be strings. If dst specifies a directory,
the file will be copied into dst using the base filename from src. Returns the path to the newly created file.

If follow_symlinks is false, and src is a symbolic link, dst will be created as a symbolic link. If
follow_symlinks is true and src is a symbolic link, dst will be a copy of the file src refers to.

copy() copies the file data and the file’s permission mode (see os.chmod()). Other metadata, like the file’s
creation and modification times, is not preserved. To preserve all file metadata from the original, use
copy2() instead.


====

shutil.copy2(src, dst, *, follow_symlinks=True)
Identical to copy() except that copy2() also attempts to preserve all file metadata.

When follow_symlinks is false, and src is a symbolic link, copy2() attempts to copy all metadata from the src
symbolic link to the newly-created dst symbolic link. However, this functionality is not available on all
platforms. On platforms where some or all of this functionality is unavailable, copy2() will preserve all the
metadata it can; copy2() never returns failure.

copy2() uses copystat() to copy the file metadata. Please see copystat() for more information about platform
support for modifying symbolic link metadata.


====

shutil.ignore_patterns(*patterns)
This factory function creates a function that can be used as a callable for copytree()’s ignore argument,
ignoring files and directories that match one of the glob-style patterns provided. See the example below.


====

shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2, ignore_dangling_symlinks=False)
Recursively copy an entire directory tree rooted at src, returning the destination directory. The destination
directory, named by dst, must not already exist; it will be created as well as missing parent directories.
Permissions and times of directories are copied with copystat(), individual files are copied using
shutil.copy2().


====

shutil.rmtree(path, ignore_errors=False, onerror=None)
Delete an entire directory tree; path must point to a directory (but not a symbolic link to a directory). If
ignore_errors is true, errors resulting from failed removals will be ignored; if false or omitted, such errors
are handled by calling a handler specified by onerror or, if that is omitted, they raise an exception.

rmtree.avoids_symlink_attacks
Indicates whether the current platform and implementation provides a symlink attack resistant version of
rmtree(). Currently this is only true for platforms supporting fd-based directory access functions.


====

shutil.move(src, dst, copy_function=copy2)
Recursively move a file or directory (src) to another location (dst) and return the destination.

If the destination is an existing directory, then src is moved inside that directory. If the destination
already exists but is not a directory, it may be overwritten depending on os.rename() semantics.

If the destination is on the current filesystem, then os.rename() is used. Otherwise, src is copied to dst
using copy_function and then removed. In case of symlinks, a new symlink pointing to the target of src will be
created in or as dst and src will be removed.


====

shutil.disk_usage(path)
Return disk usage statistics about the given path as a named tuple with the attributes total, used and free,
which are the amount of total, used and free space, in bytes. On Windows, path must be a directory; on Unix,
it can be a file or directory.


====

shutil.which(cmd, mode=os.F_OK | os.X_OK, path=None)
Return the path to an executable which would be run if the given cmd was called. If no cmd would be called,
return None.


====

shutil.make_archive(base_name, format[, root_dir[, base_dir[, verbose[, dry_run[, owner[, group[, logger]]]]]]])
Create an archive file (such as zip or tar) and return its name.

shutil.get_archive_formats()
Return a list of supported formats for archiving. Each element of the returned sequence is a tuple (name,
description).

shutil.register_archive_format(name, function[, extra_args[, description]])
Register an archiver for the format name.

shutil.unregister_archive_format(name)¶
Remove the archive format name from the list of supported formats.

shutil.unpack_archive(filename[, extract_dir[, format]])¶
Unpack an archive. filename is the full path of the archive.

shutil.register_unpack_format(name, extensions, function[, extra_args[, description]])¶
Registers an unpack format. name is the name of the format and extensions is a list of extensions
corresponding to the format, like .zip for Zip files.

shutil.unregister_unpack_format(name)
Unregister an unpack format. name is the name of the format.

shutil.get_unpack_formats()
Return a list of all registered formats for unpacking. Each element of the returned sequence is a tuple (name,
extensions, description).

